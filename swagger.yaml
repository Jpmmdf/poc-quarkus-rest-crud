---
openapi: 3.0.2
info:
  title: Agenda
  version: 1.0.0
  description: |-
    A sample API that uses a petstore as an example to demonstrate features
    in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    url: http://swagger.io
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: http://localhost:8080
paths:
  /pets:
    get:
      parameters:
      - style: form
        name: tags
        description: tags to filter by
        schema:
          type: array
          items:
            type: string
        in: query
        required: false
      - name: limit
        description: maximum number of results to return
        schema:
          format: int32
          type: integer
        in: query
        required: false
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              examples:
                laurent_cats:
                  value:
                  - id: 1
                    name: Zaza
                    tag: cat
                  - id: 2
                    name: Tigresse
                    tag: cat
                  - id: 3
                    name: Maki
                    tag: cat
                  - id: 4
                    name: Toufik
                    tag: cat
          description: pet response
      operationId: findPets
      description: |
        Returns all pets from the system that the user has access to
    post:
      requestBody:
        description: Pet to add to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
            examples:
              tigresse:
                value:
                  name: Tigresse
                  tag: cat
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                tigresse:
                  value:
                    id: 2
                    name: Tigresse
                    tag: cat
          description: pet response
      operationId: addPet
      description: Creates a new pet in the store.  Duplicates are allowed
  /pets/{id}:
    get:
      parameters:
      - examples:
          zaza:
            value: 1
        name: id
        description: ID of pet to fetch
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                zaza:
                  value:
                    id: 1
                    name: Zaza
                    tag: cat
          description: pet response
      operationId: findPetById
      description: "Returns a user based on a single ID, if the user does not have\n\
        access to the pet"
    delete:
      parameters:
      - name: id
        description: ID of pet to delete
        schema:
          format: int64
          type: integer
        in: path
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
        "204":
          description: pet deleted
      operationId: deletePet
      description: deletes a single pet based on the ID supplied
    parameters:
    - name: id
      description: Pet identifier
      schema:
        type: integer
      in: path
      required: true
  /aluno:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
              examples:
                aluno:
                  value:
                    id: 64
                    nome: some text
                    dataNascimento: some text
                    matricula: some text
                    dataCriacao: some text
                    dataAlteracao: 2018-01-17
          description: Obter Aluno
      description: 'Obter Aluno '
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aluno'
            examples:
              aluno:
                value:
                  nome: some text
                  dataNascimento: 2018-01-17
                  matricula: some text
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
              examples:
                aluno:
                  value:
                    id: 52
                    nome: some text
                    dataNascimento: 2018-01-17
                    matricula: some text
                    dataCriacao: 2018-01-17
                    dataAlteracao: 2018-01-17
          description: Retorno do Post
  /turmas:
    get:
      tags:
      - Turma
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/turma'
          description: Retorno de uma lista de turmas com sucesso
        "404":
          description: Não existe nenhuma turma cadastrada
      description: Obter todas as turmas
  /enderecos:
    get:
      responses:
        "200":
          content:
            application/json: {}
          description: Obter endereço
components:
  schemas:
    Pet:
      allOf:
      - $ref: '#/components/schemas/NewPet'
      - required:
        - id
        properties:
          id:
            format: int64
            type: integer
    NewPet:
      required:
      - name
      properties:
        name:
          type: string
        tag:
          type: string
    Error:
      required:
      - code
      - message
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
    Aluno:
      title: Root Type for Aluno
      description: Informações do aluno
      type: object
      properties:
        id:
          format: int32
          type: integer
        nome:
          type: string
        dataNascimento:
          format: date
          type: string
        matricula:
          type: string
        dataCriacao:
          format: date
          type: string
        dataAlteracao:
          format: date
          description: |
            data de alteraçao do aluno
          type: string
      example:
        id: 1
        nome: Matheus
        dataNascimento: 10/10/2000
        matricula: "0000001"
        dataCriacao: 10/10/2000
        dataAlteracao: ""
    Unidade:
      title: Root Type for Unidade
      description: Obter unidade da academia.
      type: object
      properties:
        id:
          format: int32
          type: integer
        nome:
          type: string
        endereco:
          type: string
        cidade:
          type: string
        uf:
          type: string
        email:
          type: string
        telefone:
          type: string
        dataCriacao:
          type: string
        dataAlteracao:
          type: string
      example:
        id: 1
        nome: Águas Claras
        endereco: Rua 30 sul Lote 1/2
        cidade: Brasília
        uf: DF
        email: unidadeaguasclaras@gmail.com
        telefone: "61990909090"
        dataCriacao: 01/07/2021
        dataAlteracao: 02/07/2021
    Professor:
      title: Root Type for Professor
      description: ""
      type: object
      properties:
        id:
          format: int32
          type: integer
        nome:
          type: string
        dataCriacao:
          format: date-time
          type: string
        dataAtualizacao:
          format: date-time
          type: string
      example:
        id: 1
        nome: Professor tal
        dataCriacao: 03/07/2021
        dataAtualizacao: 03/07/2021
    turma:
      title: Root Type for turma
      description: Turma
      type: object
      properties:
        id:
          format: int32
          type: integer
        nome:
          type: string
        dataCriacao:
          format: date
          type: string
      example:
        id: 1
        nome: Turma de Futebol
        dataCriacao: 10/10/10
